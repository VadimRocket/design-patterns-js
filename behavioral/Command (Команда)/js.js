/*
    Паттерн Command (Команда) - поведенческий паттерн который позволяет инкапсулировать некоторые действия и необходимые для них данные и позволяет отделить клиента от получателя.
    Он превращает запросы в объекты что позволяет передавать их как аргументы в методы.
    Т.о объект интерфейса вызывает метод из объекта бизнес логики передавая в него какие-то данные
    между интерфейса и   бизнес логикой появ-ся паттерн команда в котором инкапсулирована логика уникального запроса
    Логика в Команде, а исполнение запроса в бизнес логике, а событие не будет нах-ся в Бизнес логике
*/

// Driver - Элемент интерфейса
class Driver {
    constructor(command) {
        this.command = command; // для старта и остановки движка
    }
    execute() {
        this.command.execute();
    }
}

// Прослойка бизнес логики
class Engine{
    constructor() {
        this.state = false; // состояние двигателя: по умолчанию  выключен
    }

    on() {
        this.state = true;
    }

    off() {
        this.state = false;
    }
}

// Между водитетем и запуском двигателя нет прямого взаимодействия


// "Ключ зажигания - шаблон команды"
//  class для  старта двигателя
class OnStartCommand {
    constructor(engine) {     // принимает кусок бизнес логики - engine
        this.engine = engine;
    }

    execute() {
        this.engine.on(); // дергаем метод класса двигателя
    }
}

//  class для остановки двигателя
class onSwitchOffCommand {
    constructor(engine) {
        this.engine = engine;
    }

    execute() {
        this.engine.off();
    }
}

// Т.о есть пользователь, который знает о командах. Есть команды, которые знают о бизнес логике
// есть бизнес логика, которая в зависимости от команды   исполняет тот или иной кусок

const engine = new Engine();

console.log(engine);

// Start Engine
const onStartCommand = new OnStartCommand(engine);  // Команде передали двигатель
const driver = new Driver(onStartCommand);         // Водителю передали команду запуска двигателя - дали ключ
driver.execute();

console.log(engine);