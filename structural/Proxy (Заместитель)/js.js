// Структурный паттерн - прослойка, помогающая производить дополнит-е операции
//например, с логированием на сайте или пример с авто которая окр-ся с помощью голосового сообщения

 class CarAccess {
     open() { 
         console.log('Opening car door');
     }
     close() {
         console.log('Closing car door');
     }

 }

// Реализ-м прокси обьект прослойка который будет обеспечивать безопаснось дверей
// Т.е своего рода голосовой валидатор
// Данная охранная система принимает любую дверь и оборачивает ее в свою проверку
// 
class SecuritySystem {
    constructor(door) {
        this.door = door;
    }
    // Запрос на индификацию водителя просим происнести пароль
    open(password) {
        if(this.authenticate(password)){
            this.door.open();
        }else {
            console.log('Access denied');
        }
    }

    authenticate(password) {
        return password === 'Ilon';
    }

    close() {
        this.door.close();
    }
}

// Создали прослойк между пользователем и оригинальным классом
// Это заместитель с тем же интерфейсом что и оригинал

// Создаем экз-р обьекта доступа к машине обернуты в нашу охраннную систему

const door = new SecuritySystem(new CarAccess());
door.open('Alex');    // Access denied
door.open('Ilon');   // Opening car door
door.close();       // Closing car door


// Виды Прокси: 

// 1. Виртуальный прокси - аналог ленивой загрузки
// 2. Логирующий прокси - хранение историй обращений
// 3. Защищающий прокси
// 4. Кэширующий прокси - Частичное Кэштрование результатов  ЗАпроса клиента

// Т.о прокси  - прослойка между оригинальными обьектами  и Запросами к которым Эти запросы обращены
// Нужное для доп операций